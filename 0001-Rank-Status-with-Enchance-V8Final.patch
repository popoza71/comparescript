From 2b7a26a0bf9359b2d1f9a3a2ee79de94082e9ba8 Mon Sep 17 00:00:00 2001
From: CosmicTraveler <62945877+CosmicTraveler@users.noreply.github.com>
Date: Wed, 31 Jan 2024 17:26:02 +0700
Subject: [PATCH] Rank Status with Enchance V8Final

---
 conf/battle/misc.conf      |  20 ++-
 conf/msg_conf/map_msg.conf |   7 +
 db/custom/rank_title.yml   |  41 +++++
 npc/example.txt            |  58 ++++++++
 npc/rank_status.txt        | 226 ++++++++++++++++++++++++++++
 src/map/battle.cpp         |   7 +
 src/map/battle.hpp         |   7 +
 src/map/clif.cpp           |   1 +
 src/map/pc.cpp             |  73 +++++++++
 src/map/pc.hpp             |  16 ++
 src/map/script.cpp         | 296 +++++++++++++++++++++++++++++++++++++
 src/map/status.cpp         | 128 ++++++++++++++++
 src/map/status.hpp         |  29 ++++
 13 files changed, 908 insertions(+), 1 deletion(-)
 create mode 100644 db/custom/rank_title.yml
 create mode 100644 npc/example.txt
 create mode 100644 npc/rank_status.txt

diff --git a/conf/battle/misc.conf b/conf/battle/misc.conf
index 37db44c..f029a37 100644
--- a/conf/battle/misc.conf
+++ b/conf/battle/misc.conf
@@ -182,4 +182,22 @@ disp_servervip_msg: no
 mail_delay: 1000
 
 // Hides items from the player's favorite tab from being sold to a NPC. (Note 1)
-hide_fav_sell: no
\ No newline at end of file
+hide_fav_sell: no
+
+// เปิด/ปิด ระบบ rank
+rank_title_system: yes
+
+// rank ส่งผลใน GVG ?
+rank_title_gvg: no
+
+// กำหนดเวลต่ำสุดที่จะเก็บเวล rank title ได้
+rank_title_min_lv: 10
+
+// กำหนด effect เวล rank up
+rank_title_effect: 722
+
+// กำหนด max enchance
+rank_enchance_max: 1
+
+// กำหนด max exp
+rank_max_exp: 100
\ No newline at end of file
diff --git a/conf/msg_conf/map_msg.conf b/conf/msg_conf/map_msg.conf
index 49e09c2..9d1b102 100644
--- a/conf/msg_conf/map_msg.conf
+++ b/conf/msg_conf/map_msg.conf
@@ -1815,5 +1815,12 @@
 1531: Invalid position.
 1532: Invalid slot number.
 
+1541: [Rank Status] ได้รับ Rank Status +%lld EXP. [%lld/%lld].
+1542: [Rank Status] ปลดล็อค Rank Enchance <%s>.
+1543: [Rank Status] Rank Level Up <%s> -> <%s>.
+1544: [Rank Status] แลกเปลี่ยน %lld EXP, คงเหลือ %lld EXP.
+1545: [Rank Status] Rank Level Down <%s> -> <%s>.
+1546: [Rank Status] Rank Level Up <%s>.
+
 //Custom translations
 import: conf/msg_conf/import/map_msg_eng_conf.txt
diff --git a/db/custom/rank_title.yml b/db/custom/rank_title.yml
new file mode 100644
index 0000000..d3d339a
--- /dev/null
+++ b/db/custom/rank_title.yml
@@ -0,0 +1,41 @@
+###########################################################################
+#
+# Whispering Rain
+#
+###########################################################################
+
+Header:
+  Type: RANK_TITLE_DB
+  Version: 1
+
+Body:
+
+  - Id: 1101
+    RankName: Child
+    EXP: 1000
+    Script: |
+      bonus bPow,5;
+
+  - Id: 1102
+    RankName: Adult
+    EXP: 2000
+    Script: |
+      bonus bSta,5;
+
+  - Id: 1103
+    RankName: Rookie
+    EXP: 3000
+    Script: |
+      bonus bSpl,5;
+
+  - Id: 1104
+    RankName: Novice
+    EXP: 4000
+    Script: |
+      bonus bCon,5;
+
+  - Id: 1105
+    RankName: Commander
+    EXP: 9999
+    Script: |
+      bonus bCrt,5;
\ No newline at end of file
diff --git a/npc/example.txt b/npc/example.txt
new file mode 100644
index 0000000..6e1518e
--- /dev/null
+++ b/npc/example.txt
@@ -0,0 +1,58 @@
+ตั้งค่า rank_title ใน db/custom/rank_title.yml
+
+นำไฟล์ lub ที่แถมให้ไปใส่ data (grf)
+
+ปรับแต่งอื่นๆได้ใน conf/battle/misc.conf
+
+src ต้องใช้คู่กับ script npc ใน Diff นี้
+
+สำหรับ reload ไฟล์ rank_title.yml ให้ใช้ @reloadstatusdb
+
+วิธีการเปิด สมุด status
+
+callfunc("F_RANK");
+
+เอาไว้ใช้กับ item
+
+วิธีการเปิด เมนู Enchance 
+
+callfunc("F_ENCHANCE_RANK", <Item ID ใบ>);
+
+ตัวอย่าง
+
+callfunc("F_ENCHANCE_RANK", 501);
+
+สำหรับ reset enchance
+
+rank_enchance_reset();
+
+ไว้ใช้งานใน script npc
+
+ตัวอย่าง item ใน itemdb
+
+  - Id: 33011
+    AegisName: EXP_VIAL_1K
+    Name: Exp vial 1K
+    Type: Usable
+    Buy: 1
+    Weight: 1
+    Script: |
+      getexp 1000,0;
+  - Id: 33012
+    AegisName: EXP_VIAL_5K
+    Name: Exp vial 5K
+    Type: Usable
+    Buy: 1
+    Weight: 1
+    Script: |
+      getexp 5000,0;
+  - Id: 33013
+    AegisName: EXP_VIAL_10K
+    Name: Exp vial 10K
+    Type: Usable
+    Buy: 1
+    Weight: 1
+    Script: |
+      getexp 10000,0;
+
+รายละเอียดอื่นๆ สามารถปรับแต่งได้ในสคริปต์
\ No newline at end of file
diff --git a/npc/rank_status.txt b/npc/rank_status.txt
new file mode 100644
index 0000000..09136e4
--- /dev/null
+++ b/npc/rank_status.txt
@@ -0,0 +1,226 @@
+function	script	F_RANK	{
+
+	get_currect_rank_data();
+	.npcname$ = "[^FF0000^000000 ^2f00ffStatus Book^000000 ^FF0000^000000]";
+
+	mes .npcname$;
+	if(@ranktitle_high_name$ != "")
+		mes "Rank สูงสุดของท่าน : ^0800ff" + @ranktitle_high_name$ + "^000000";
+	else
+		mes "Rank สูงสุดของท่าน : ^0800ffไม่มี^000000";
+	if(@ranktitle_current1_name$ != "")
+		mes "Rank : ^0800ff" + @ranktitle_current1_name$ + "^000000";
+	else
+		mes "Rank : ^0800ffไม่มี^000000";
+	if(@ranktitle_current2_name$ != "")
+		mes "Rank (Enchance) : ^0800ff" + @ranktitle_current2_name$ + "^000000";
+
+	mes "% แบ่ง EXP : ^ed00ed" + RANKTITLE_PERCENT + "^000000%";
+	
+	menu " ^FF0000^000000 ปรับแต่ง EXP เข้า Status Book",-," ^FF0000^000000 เปลี่ยน Rank โบนัส",-," ^FF0000^000000 แลก EXP",-," ^FF0000^000000 ยกเลิก",-;
+	set .@sel,@menu;
+	if(.@sel == 4){end;}
+	if(.@sel == 3){ doevent "STATUS_EXCHANGE::OnMenuCall"; end; }
+	if(.@sel == 2){ next;callsub OnChangeMainRank; }
+	input .@input_numb,0,100;
+
+	next;
+	mes .npcname$;
+	mes "ท่านต้องการปรับแต่ง EXP เข้า Status Book ใช่หรือไม่?";
+	mes "EXP : " + .@input_numb + "%";
+
+	menu " ^FF0000^000000 ยันยืน",-," ^FF0000^000000 ยกเลิก",-;
+	set .@c_sel,@menu;
+	if(.@c_sel == 2){end;}
+
+	RANKTITLE_PERCENT = .@input_numb;
+
+	mes "ทำการปรับแต่ง EXP เข้า Status Book เรียบร้อยแล้ว";
+	end;
+
+OnChangeMainRank:
+	get_currect_rank_data();
+	get_rank_data();
+	mes .npcname$;
+
+	if(getarraysize(@ranktitle_id) < 1){
+		mes "ท่านยังไม่มี Rank ใดๆ";
+		end;
+	}
+
+	mes "Rank สูงสุดของท่าน : ^0800ff" + @ranktitle_high_name$ + "^000000";
+	mes "Rank : ^0800ff" + @ranktitle_current1_name$ + "^000000";	
+
+	for(.@i=0;.@i<getarraysize(@ranktitle_id);.@i++){
+		set .@rank_menu$, .@rank_menu$ + " - ^0800ff" + @ranktitle_name$[.@i] + "^000000:";
+	}
+	set .@rank_sel, select(.@rank_menu$)-1;
+
+	next;
+	mes .npcname$;
+	mes "ท่านต้องการเปลี่ยน Rank ?";
+	mes "Rank : " + @ranktitle_name$[.@rank_sel];
+	mes "ใช่หรือไม่?";
+
+	menu " ^FF0000^000000 ใช่แล้ว",-," ^FF0000^000000 ยกเลิก",-;
+	set .@sel,@menu;
+
+	if(.@sel == 2){end;}
+	rank_status_change(@ranktitle_id[.@rank_sel]);
+	next;
+	mes .npcname$;
+	mes "ทำการเปลี่ยน Rank เรียบร้อยแล้ว";
+	end;
+}
+
+function	script	F_ENCHANCE_RANK	{
+	get_currect_rank_data();
+	get_rank_echance_data();
+	.@item = getarg(0);
+	.@npcname$ = "[^FF0000^000000 ^2f00ffStatus Book^000000 ^FF0000^000000]";
+
+	mes .@npcname$;
+
+	mes "Rank สูงสุดของท่าน : ^0800ff" + @ranktitle_high_name$ + "^000000";
+	mes "Rank : ^0800ff" + @ranktitle_current1_name$ + "^000000";
+	mes "Enchance : " + RANKTITLE_ENCHANCE + "|" + getbattleflag("rank_enchance_max");
+
+	if(RANKTITLE_ENCHANCE >= getbattleflag("rank_enchance_max")){
+		mes "ท่านได้ Enchance ครบแล้ว";
+		end;
+	}
+
+	mes "โปรดเลือก Rank ที่ต้องการ Enchance";
+
+	if(!getarraysize(@ranktitle_id)){
+		end;
+	}
+
+	for(.@i=0;.@i<getarraysize(@ranktitle_id);.@i++){
+		set .@rank_menu$, .@rank_menu$ + " - ^0800ff" + @ranktitle_name$[.@i] + "^000000:";
+	}
+	set .@rank_sel, select(.@rank_menu$)-1;
+
+	next;
+	mes .@npcname$;
+	mes "ท่านต้องการ Rank Enchance ?";
+	mes "Rank : " + @ranktitle_name$[.@rank_sel];
+	mes "ค่าบริการ : ^0800ff" + getitemname(.@item) + "^000000 x1 ea.";
+	mes "ใช่หรือไม่?";
+
+	menu " ^FF0000^000000 ใช่แล้ว",-," ^FF0000^000000 ยกเลิก",-;
+	set .@sel,@menu;
+
+	if(.@sel == 2){end;}
+
+	if(countitem(.@item) < 1){
+		next;
+		mes .@npcname$;
+		mes "ท่านไม่มีตั๋ว Enchance";
+		end;
+	}
+
+	.@result = rank_status_enchance(@ranktitle_id[.@rank_sel]);
+
+	if(.@result == 0){
+		next;
+		mes .@npcname$;
+		mes "ระบบ Rank Enchance ขัดข้อง กรุณาแจ้ง GM";
+		end;
+	}else if (.@result == 2){
+		next;
+		mes .@npcname$;
+		mes "ท่านได้ Enchance ครบแล้ว";
+		end;
+	}
+
+	delitem .@item,1;
+	next;
+	mes .@npcname$;
+	mes "ทำการ Rank Enchnace เรียบร้อยแล้ว";
+	end;
+}
+
+-	script	STATUS_EXCHANGE	-1,{
+	end;
+
+OnInit:
+
+	// 1 = จำกัดต่อวัน / 0 = ไม่จำกัด
+	.exchange_mode = 0;
+
+	.max_exchange_per_day = 10;
+
+	end;
+
+OnMenuCall:
+
+	if(.exchange_mode){
+		.@currect_date$ = gettime(DT_YYYYMMDD);
+		
+		if(.@currect_date$ != pc_date$){
+			pc_date$ = .@currect_date$;
+			pc_exchange_count = 0;
+		}
+		dispbottom "======== จำนวนการแลก EXP วันนี้ ========";
+		dispbottom " จำนวนที่แลกได้ : " + pc_exchange_count + "/" + .max_exchange_per_day;
+		dispbottom "==============================";
+	}
+	callshop "status_shop",1;
+	npcshopattach "status_shop";
+	end;
+
+OnBuyItem:
+
+	.@sum = 0;
+	.@total_cost = 0;
+
+	for(.@i=0;.@i<getarraysize(@bought_nameid);.@i++){
+		.@sum += @bought_quantity[.@i];
+	}
+
+	if(.exchange_mode){
+		if(pc_exchange_count + .@sum > .max_exchange_per_day){
+			dispbottom "ท่านสามารถแลก EXP ได้สูงสุด " + .max_exchange_per_day + " ครั้งต่อวัน";
+			end;
+		}
+	}
+
+	for(.@i=0;.@i<getarraysize(@bought_nameid);.@i++){
+		.@total_cost += callfunc("F_EXP_COST",@bought_nameid[.@i]) * @bought_quantity[.@i];
+	}
+
+	if(RANKTITLE_EXP < .@total_cost){
+		dispbottom "EXP ของท่านไม่เพียงพอ";
+		end;
+	}
+
+	for(.@i=0;.@i<getarraysize(@bought_nameid);.@i++){
+		getitem @bought_nameid[.@i],@bought_quantity[.@i];
+	}
+
+	pc_exchange_count += .@sum;
+
+	rank_title_exchange(.@total_cost);
+	end;
+}
+
+function	script	F_EXP_COST	{
+
+	.@itemid = getarg(0);
+
+	// กำหนดราคา EXP ต่อขวด
+	switch(.@itemid){
+		case 33011:
+			return 1000;
+		case 33012:
+			return 5000;
+		case 33013:
+			return 10000;
+		default:
+			return 0;
+	}
+}
+
+// กำหนดของที่จะขาย
+-	shop	status_shop	-1,33011:-1,33012:-1,33013:-1
\ No newline at end of file
diff --git a/src/map/battle.cpp b/src/map/battle.cpp
index 0eb42fd..e433e83 100644
--- a/src/map/battle.cpp
+++ b/src/map/battle.cpp
@@ -10631,6 +10631,13 @@ static const struct _battle_data {
 	{ "feature.instance_allow_reconnect",   &battle_config.instance_allow_reconnect,        0,      0,      1,              },
 #endif
 
+	{ "rank_title_system",					&battle_config.rank_title_system,				0,      0,      1,              },
+	{ "rank_title_gvg",						&battle_config.rank_title_gvg,					0,      0,      1,              },
+	{ "rank_title_min_lv",					&battle_config.rank_title_min_lv,			    1,      0,      9999,           },
+	{ "rank_title_effect",					&battle_config.rank_title_effect,				0,      0,      INT_MAX,		},
+	{ "rank_enchance_max",					&battle_config.rank_enchance_max,				1,      1,      INT_MAX,		},
+	{ "rank_max_exp",						&battle_config.rank_max_exp,					0,      0,      INT_MAX,		},
+
 #include <custom/battle_config_init.inc>
 };
 
diff --git a/src/map/battle.hpp b/src/map/battle.hpp
index 600e627..52d4d94 100644
--- a/src/map/battle.hpp
+++ b/src/map/battle.hpp
@@ -732,6 +732,13 @@ struct Battle_Config
 	int feature_banking_state_enforce;
 	int instance_allow_reconnect;
 
+	int rank_title_system;
+	int rank_title_gvg;
+	int rank_title_min_lv;
+	int rank_title_effect;
+	int rank_enchance_max;
+	int rank_max_exp;
+
 #include <custom/battle_config_struct.inc>
 };
 
diff --git a/src/map/clif.cpp b/src/map/clif.cpp
index 991b5b1..8911f59 100644
--- a/src/map/clif.cpp
+++ b/src/map/clif.cpp
@@ -20476,6 +20476,7 @@ void clif_parse_change_title(int fd, map_session_data *sd)
 	int title_id;
 
 	nullpo_retv(sd);
+	return;
 
 	title_id = RFIFOL(fd, 2);
 
diff --git a/src/map/pc.cpp b/src/map/pc.cpp
index f67cd39..ca58509 100644
--- a/src/map/pc.cpp
+++ b/src/map/pc.cpp
@@ -8253,6 +8253,75 @@ void pc_gainexp_disp(map_session_data *sd, t_exp base_exp, t_exp next_base_exp,
 	clif_messagecolor(&sd->bl, color_table[COLOR_LIGHT_GREEN], output, false, SELF);
 }
 
+/**
+ **/
+t_exp pc_ranktitle_exp(map_session_data *sd,t_exp exp)
+{
+	nullpo_retr(exp,sd);
+
+	int rank_title = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 0));
+	int rank_index = 0;
+	t_exp rank_exp = 0;
+	t_exp current_rank_exp = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_EXP_VAR), 0));
+	t_exp next_exp = 0;
+	int percent = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_PERCENT_VAR), 0));
+	char msg[CHAT_SIZE_MAX];
+	std::shared_ptr<s_rank_title> currect_rank = {};
+	std::shared_ptr<s_rank_title> next_rank = {};
+
+	if(rank_title>=sort_rank_title_list[0])
+		currect_rank = rank_title_db.find(rank_title);
+
+	if(percent && sd->status.base_level >= battle_config.rank_title_min_lv){
+		rank_exp = exp * percent / 100;
+
+		if(battle_config.rank_max_exp)
+			rank_exp = u64min(rank_exp,battle_config.rank_max_exp);
+
+		if(rank_exp){
+			exp -= rank_exp;
+
+			if(!rank_title)
+				next_rank = rank_title_db.find(sort_rank_title_list[0]);
+			else
+				next_rank = rank_title_db.find(rank_title+1);
+
+			current_rank_exp += rank_exp;
+
+			if(next_rank){
+				sprintf (msg, msg_txt(NULL,1541), rank_exp,current_rank_exp,next_rank->exp);
+				clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg, false, SELF);
+				pc_setregistry(sd, reference_uid(add_str(RANKTITLE_EXP_VAR), 0), current_rank_exp);
+
+				for(const auto &rank_title_data : rank_title_db){
+					if(rank_title < rank_title_data.second->title_id && current_rank_exp >= rank_title_data.second->exp){
+						rank_index = rank_title_data.second->title_id;
+					}
+				}
+
+				// update title id
+				if(rank_index){
+					pc_setregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 0), rank_index);
+					pc_setregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0), rank_index);
+					pc_setregistry(sd, reference_uid(add_str(RANKTITLE_HIGH_ID_VAR), 0), rank_index);
+					status_calc_pc(sd,SCO_NONE);
+					clif_specialeffect(&sd->bl, battle_config.rank_title_effect, AREA);
+					sd->status.title_id = rank_index;
+					clif_name_area(&sd->bl);
+					char msg[CHAT_SIZE_MAX];
+					if(currect_rank)
+						sprintf (msg, msg_txt(NULL,1543),currect_rank->title_name.c_str(),next_rank->title_name.c_str());
+					else
+						sprintf (msg, msg_txt(NULL,1546),next_rank->title_name.c_str());
+					clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg, false, SELF);
+				}
+			}
+			return exp;
+		}
+	}
+	return 0;
+}
+
 /**
  * Give Base or Job EXP to player, then calculate remaining exp for next lvl
  * @param sd Player
@@ -8281,6 +8350,10 @@ void pc_gainexp(map_session_data *sd, struct block_list *src, t_exp base_exp, t_
 			base_exp -= guild_payexp(sd,base_exp);
 	}
 
+	if(battle_config.rank_title_system){
+		base_exp -= pc_ranktitle_exp(sd,base_exp);
+	}
+
 	flag = ((base_exp) ? 1 : 0) |
 		((job_exp) ? 2 : 0) |
 		((pc_is_maxbaselv(sd)) ? 4 : 0) |
diff --git a/src/map/pc.hpp b/src/map/pc.hpp
index c37cd4f..2bfb136 100644
--- a/src/map/pc.hpp
+++ b/src/map/pc.hpp
@@ -66,6 +66,22 @@ class MapGuild;
 #define ATTENDANCE_COUNT_VAR "#AttendanceCounter"
 #define ACHIEVEMENTLEVEL "AchievementLevel"
 
+#define RANKTITLE_VAR "RANKTITLE_ID"
+#define RANKTITLE_EXP_VAR "RANKTITLE_EXP"
+#define RANKTITLE_PERCENT_VAR "RANKTITLE_PERCENT"
+#define RANKTITLE_HIGH_ID_VAR "RANKTITLE_HIGH_ID"
+#define RANKTITLE_ENCHANCE_VAR "RANKTITLE_ENCHANCE"
+#define RANKTITLE_PC_ID_VAR "@ranktitle_id"
+#define RANKTITLE_PC_NAME_VAR "@ranktitle_name$"
+#define RANKTITLE_CURRENT1_ID_VAR "@ranktitle_current1_id"
+#define RANKTITLE_CURRENT1_NAME_VAR "@ranktitle_current1_name$"
+#define RANKTITLE_CURRENT2_ID_VAR "@ranktitle_current2_id"
+#define RANKTITLE_CURRENT2_NAME_VAR "@ranktitle_current2_name$"
+#define RANKTITLE_NEXT_EXP_VAR "@ranktitle_next_exp"
+#define RANKTITLE_NEXT_NAME_VAR "@ranktitle_next_name$"
+#define RANKTITLE_HIGH_NAME_VAR "@ranktitle_high_name$"
+#define RANKTITLE_C_VAR "RANKTITLE_N_VAR"
+
 //Total number of classes (for data storage)
 #define CLASS_COUNT (JOB_MAX - JOB_NOVICE_HIGH + JOB_MAX_BASIC)
 
diff --git a/src/map/script.cpp b/src/map/script.cpp
index a17760b..3f948c5 100644
--- a/src/map/script.cpp
+++ b/src/map/script.cpp
@@ -26929,6 +26929,294 @@ BUILDIN_FUNC(macro_detector) {
 	return SCRIPT_CMD_SUCCESS;
 }
 
+BUILDIN_FUNC(get_rank_data)
+{
+	map_session_data *sd;
+
+	if (!script_charid2sd(2,sd))
+		return SCRIPT_CMD_FAILURE;
+
+	int highest_id = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_HIGH_ID_VAR), 0));
+	int currect_rank_1 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0));
+	int currect_rank_2 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 1));
+
+	if(highest_id == 0){
+		script_pushint(st,0);
+		return SCRIPT_CMD_SUCCESS;
+	}
+
+	script_cleararray_pc(sd,RANKTITLE_PC_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_PC_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT1_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT1_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT2_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT2_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_C_VAR);
+
+	std::vector<int> rank_lists = {};
+
+	for(const auto &entry : sort_rank_title_list){
+
+		if(currect_rank_2 && entry == currect_rank_2)
+			continue;
+
+		if(entry > highest_id)
+			break;
+
+		rank_lists.push_back(entry);
+	}
+
+	for(int i = 0; i < rank_lists.size() ; i++){
+		std::shared_ptr<s_rank_title> rank_data = rank_title_db.find(rank_lists[i]);
+		if(rank_data){
+			pc_setreg(sd,reference_uid(add_str(RANKTITLE_PC_ID_VAR), i), rank_data->title_id);
+			pc_setregstr(sd,reference_uid(add_str(RANKTITLE_PC_NAME_VAR), i), rank_data->title_name.c_str());
+		}
+	}
+
+	std::shared_ptr<s_rank_title> crank1_data = rank_title_db.find(currect_rank_1);
+	pc_setreg(sd,reference_uid(add_str(RANKTITLE_CURRENT1_ID_VAR), 0),(crank1_data ? crank1_data->title_id : 0));
+	pc_setregstr(sd,reference_uid(add_str(RANKTITLE_CURRENT1_NAME_VAR), 0),(crank1_data ? crank1_data->title_name.c_str() : ""));
+	std::shared_ptr<s_rank_title> crank2_data = rank_title_db.find(currect_rank_2);
+	pc_setreg(sd,reference_uid(add_str(RANKTITLE_CURRENT2_ID_VAR), 0),(crank2_data ? crank2_data->title_id : 0));
+	pc_setregstr(sd,reference_uid(add_str(RANKTITLE_CURRENT2_NAME_VAR), 0),(crank2_data ? crank2_data->title_name.c_str() : ""));
+	return SCRIPT_CMD_SUCCESS;
+}
+
+BUILDIN_FUNC(get_rank_echance_data)
+{
+	map_session_data *sd;
+
+	if (!script_charid2sd(2,sd))
+		return SCRIPT_CMD_FAILURE;
+
+	int highest_id = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_HIGH_ID_VAR), 0));
+	int currect_rank_1 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0));
+	int currect_rank_2 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 1));
+
+	if(!highest_id){
+		script_pushint(st,0);
+		return SCRIPT_CMD_SUCCESS;
+	}
+
+	script_cleararray_pc(sd,RANKTITLE_PC_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_PC_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT1_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT1_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT2_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT2_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_C_VAR);
+
+	std::vector<int> rank_lists = {};
+
+	for(const auto &entry : sort_rank_title_list){
+
+		if(entry == currect_rank_1)
+			continue;
+
+		if(entry > highest_id)
+			break;
+
+		rank_lists.push_back(entry);
+	}
+
+	for(int i = 0; i < rank_lists.size() ; i++){
+		std::shared_ptr<s_rank_title> rank_data = rank_title_db.find(rank_lists[i]);
+		if(rank_data){
+			pc_setreg(sd,reference_uid(add_str(RANKTITLE_PC_ID_VAR), i), rank_data->title_id);
+			pc_setregstr(sd,reference_uid(add_str(RANKTITLE_PC_NAME_VAR), i), rank_data->title_name.c_str());
+		}
+	}
+
+	std::shared_ptr<s_rank_title> crank1_data = rank_title_db.find(currect_rank_1);
+	pc_setreg(sd,reference_uid(add_str(RANKTITLE_CURRENT1_ID_VAR), 0),(crank1_data ? crank1_data->title_id : 0));
+	pc_setregstr(sd,reference_uid(add_str(RANKTITLE_CURRENT1_NAME_VAR), 0),(crank1_data ? crank1_data->title_name.c_str() : ""));
+	std::shared_ptr<s_rank_title> crank2_data = rank_title_db.find(currect_rank_2);
+	pc_setreg(sd,reference_uid(add_str(RANKTITLE_CURRENT2_ID_VAR), 0),(crank2_data ? crank2_data->title_id : 0));
+	pc_setregstr(sd,reference_uid(add_str(RANKTITLE_CURRENT2_NAME_VAR), 0),(crank2_data ? crank2_data->title_name.c_str() : ""));
+	return SCRIPT_CMD_SUCCESS;
+}
+
+bool ranktitle_enchance(map_session_data *sd,int rank_title,int enchance)
+{
+	nullpo_retr(false,sd);
+
+	std::shared_ptr<s_rank_title> rank_data = rank_title_db.find(rank_title);
+
+	if(!rank_title)
+		return false;
+
+	pc_setregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 1), rank_title);
+	pc_setregistry(sd, reference_uid(add_str(RANKTITLE_ENCHANCE_VAR), 0), enchance+1);
+
+	char msg[CHAT_SIZE_MAX];
+	sprintf (msg, msg_txt(NULL,1542), rank_data->title_name.c_str());
+	clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg, false, SELF);
+	status_calc_pc(sd,SCO_NONE);
+	return true;
+}
+
+BUILDIN_FUNC(rank_status_enchance) {
+	map_session_data *sd;
+
+	if (!script_mapid2sd(3, sd))
+		return SCRIPT_CMD_FAILURE;
+
+	int title_id = script_getnum(st, 2);
+
+	int enchance = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_ENCHANCE_VAR), 0));
+
+	if(enchance>=battle_config.rank_enchance_max){
+		script_pushint(st,2);
+		return SCRIPT_CMD_SUCCESS;
+	}
+
+	bool result = ranktitle_enchance(sd,title_id,enchance);
+
+	if(!result){
+		script_pushint(st,0);
+		return SCRIPT_CMD_FAILURE;
+	}
+
+	script_pushint(st,1);
+	return SCRIPT_CMD_SUCCESS;
+}
+
+BUILDIN_FUNC(get_currect_rank_data) {
+	map_session_data *sd;
+
+	if (!script_mapid2sd(2, sd))
+		return SCRIPT_CMD_FAILURE;
+
+	int highest_id = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_HIGH_ID_VAR), 0));
+	int currect_rank_1 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0));
+	int currect_rank_2 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 1));
+
+	script_cleararray_pc(sd,RANKTITLE_CURRENT1_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT1_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT2_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT2_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_NEXT_EXP_VAR);
+	script_cleararray_pc(sd,RANKTITLE_NEXT_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_HIGH_NAME_VAR);
+
+	std::shared_ptr<s_rank_title> crank1_data = rank_title_db.find(currect_rank_1);
+	pc_setreg(sd,reference_uid(add_str(RANKTITLE_CURRENT1_ID_VAR), 0),(crank1_data ? crank1_data->title_id : 0));
+	pc_setregstr(sd,reference_uid(add_str(RANKTITLE_CURRENT1_NAME_VAR), 0),(crank1_data ? crank1_data->title_name.c_str() : ""));
+	std::shared_ptr<s_rank_title> crank2_data = rank_title_db.find(currect_rank_2);
+	pc_setreg(sd,reference_uid(add_str(RANKTITLE_CURRENT2_ID_VAR), 0),(crank2_data ? crank2_data->title_id : 0));
+	pc_setregstr(sd,reference_uid(add_str(RANKTITLE_CURRENT2_NAME_VAR), 0),(crank2_data ? crank2_data->title_name.c_str() : ""));
+	std::shared_ptr<s_rank_title> next_rank = rank_title_db.find(currect_rank_1+1);
+	pc_setreg(sd,reference_uid(add_str(RANKTITLE_NEXT_EXP_VAR), 0),(next_rank ? next_rank->exp : 0));
+	pc_setregstr(sd,reference_uid(add_str(RANKTITLE_NEXT_NAME_VAR), 0),(next_rank ? next_rank->title_name.c_str() : ""));
+	std::shared_ptr<s_rank_title> high_rank = rank_title_db.find(highest_id);
+	pc_setregstr(sd,reference_uid(add_str(RANKTITLE_HIGH_NAME_VAR), 0),(high_rank ? high_rank->title_name.c_str() : ""));
+	return SCRIPT_CMD_SUCCESS;
+}
+
+void rank_title_exchange(map_session_data *sd,t_exp exchange_exp)
+{
+	nullpo_retv(sd);
+
+	int currect_rank_1 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0));
+	int highest_id = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_HIGH_ID_VAR), 0));
+	t_exp currect_exp = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_EXP_VAR), 0));
+	currect_exp -= exchange_exp;
+
+	std::shared_ptr<s_rank_title> rank_data = rank_title_db.find(highest_id);
+
+	int down_rank_amount = 0;
+
+	for(int i = sort_rank_title_list[0]; i < highest_id; i++){
+		std::shared_ptr<s_rank_title> down_rank = rank_title_db.find(i);
+		if(down_rank){
+			if(currect_exp >= down_rank->exp){
+				down_rank_amount = i;
+			}
+		}
+	}
+
+	std::shared_ptr<s_rank_title> rank_lower = {};
+
+	if(down_rank_amount)
+		rank_lower = rank_title_db.find(down_rank_amount);
+
+	char msg[CHAT_SIZE_MAX];
+	sprintf (msg, msg_txt(NULL,1544),exchange_exp,currect_exp);
+	clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], msg, false, SELF);
+	pc_setregistry(sd, reference_uid(add_str(RANKTITLE_EXP_VAR), 0), currect_exp);
+
+	if(rank_lower == nullptr){
+		pc_setregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 0), 0);
+		pc_setregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0), 0);
+		pc_setregistry(sd, reference_uid(add_str(RANKTITLE_HIGH_ID_VAR), 0), 0);
+		sd->status.title_id = 0;
+	}
+
+	if(rank_lower){
+		if(currect_rank_1>rank_lower->title_id){
+			pc_setregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 0), rank_lower->title_id);
+			pc_setregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0), rank_lower->title_id);
+			sd->status.title_id = rank_lower->title_id;
+		}
+
+		char derank_msg[CHAT_SIZE_MAX];
+		sprintf (derank_msg, msg_txt(NULL,1545),rank_data->title_name.c_str(),rank_lower->title_name.c_str());
+		clif_messagecolor(&sd->bl, color_table[COLOR_CYAN], derank_msg, false, SELF);
+		pc_setregistry(sd, reference_uid(add_str(RANKTITLE_HIGH_ID_VAR), 0), rank_lower->title_id);
+	}
+
+	script_cleararray_pc(sd,RANKTITLE_C_VAR);
+	script_cleararray_pc(sd,RANKTITLE_PC_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_PC_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT1_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT1_NAME_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT2_ID_VAR);
+	script_cleararray_pc(sd,RANKTITLE_CURRENT2_NAME_VAR);
+
+	clif_name_area(&sd->bl);
+	status_calc_pc(sd,SCO_NONE);
+}
+
+BUILDIN_FUNC(rank_title_exchange) {
+	map_session_data *sd;
+
+	if (!script_mapid2sd(3, sd))
+		return SCRIPT_CMD_FAILURE;
+
+	int exchange_exp = script_getnum(st, 2);
+
+	rank_title_exchange(sd, exchange_exp);
+	return SCRIPT_CMD_SUCCESS;
+}
+
+BUILDIN_FUNC(rank_enchance_reset) {
+	map_session_data *sd;
+
+	if (!script_mapid2sd(2, sd))
+		return SCRIPT_CMD_FAILURE;
+
+	pc_setregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 1), 0);
+	pc_setregistry(sd, reference_uid(add_str(RANKTITLE_ENCHANCE_VAR), 0), 0);
+	status_calc_pc(sd,SCO_NONE);
+	return SCRIPT_CMD_SUCCESS;
+}
+
+BUILDIN_FUNC(rank_status_change) {
+	map_session_data *sd;
+
+	if (!script_mapid2sd(3, sd))
+		return SCRIPT_CMD_FAILURE;
+
+	int title_id = script_getnum(st, 2);
+
+	pc_setregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0), title_id);
+	sd->status.title_id = title_id;
+	clif_name_area(&sd->bl);
+	status_calc_pc(sd,SCO_NONE);
+	return SCRIPT_CMD_SUCCESS;
+}
+
 #include <custom/script.inc>
 
 // declarations that were supposed to be exported from npc_chat.cpp
@@ -27685,6 +27973,14 @@ struct script_function buildin_func[] = {
 	BUILDIN_DEF(isdead, "?"),
 	BUILDIN_DEF(macro_detector, "?"),
 
+	BUILDIN_DEF(get_rank_data, ""),
+	BUILDIN_DEF(get_rank_echance_data, ""),
+	BUILDIN_DEF(rank_status_enchance, "i"),
+	BUILDIN_DEF(get_currect_rank_data, ""),
+	BUILDIN_DEF(rank_title_exchange, "i"),
+	BUILDIN_DEF(rank_enchance_reset, ""),
+	BUILDIN_DEF(rank_status_change, "i"),
+
 #include <custom/script_def.inc>
 
 	{NULL,NULL,NULL},
diff --git a/src/map/status.cpp b/src/map/status.cpp
index ea91f02..15fef73 100644
--- a/src/map/status.cpp
+++ b/src/map/status.cpp
@@ -50,6 +50,8 @@ enum e_regen {
 static struct eri *sc_data_ers; /// For sc_data entries
 static struct status_data dummy_status;
 
+std::vector<int> sort_rank_title_list;
+
 short current_equip_item_index; /// Contains inventory index of an equipped item. To pass it into the EQUP_SCRIPT [Lupus]
 unsigned int current_equip_combo_pos; /// For combo items we need to save the position of all involved items here
 int current_equip_card_id; /// To prevent card-stacking (from jA) [Skotlex]
@@ -3742,6 +3744,39 @@ int status_calc_pc_sub(map_session_data* sd, uint8 opt)
 		pet_delautobonus(*sd, sd->pd->autobonus3, true);
 	}
 
+	if (battle_config.rank_title_system) {
+		uint16 title_slot_1 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_C_VAR), 0));
+		uint16 title_slot_2 = pc_readregistry(sd, reference_uid(add_str(RANKTITLE_VAR), 1));
+
+		struct map_data *rank_map = map_getmapdata(sd->bl.m);
+
+		std::vector<uint16> title_slots;
+
+		if (title_slot_1)
+			title_slots.push_back(title_slot_1);
+
+		if (title_slot_2)
+			title_slots.push_back(title_slot_2);
+
+		if(title_slots.size()){
+			for(const auto& title_id : title_slots){
+				std::shared_ptr<s_rank_title> rank_title = rank_title_db.find(title_id);
+
+				if (rank_title && rank_title->script != nullptr ){
+					if(!battle_config.rank_title_gvg && !mapdata_flag_vs(rank_map)){
+						run_script(rank_title->script, 0, sd->bl.id, 0);
+						if (!calculating) // Abort, run_script retriggered this. [Skotlex]
+							return 1;
+					}else if (battle_config.rank_title_gvg){
+						run_script(rank_title->script, 0, sd->bl.id, 0);
+						if (!calculating) // Abort, run_script retriggered this. [Skotlex]
+							return 1;
+					}
+				}
+			}
+		}
+	}
+
 	// Parse equipment
 	for (i = 0; i < EQI_MAX; i++) {
 		current_equip_item_index = index = sd->equip_index[i]; // We pass INDEX to current_equip_item_index - for EQUIP_SCRIPT (new cards solution) [Lupus]
@@ -15934,6 +15969,96 @@ void StatusDatabase::loadingFinished(){
 
 StatusDatabase status_db;
 
+const std::string RankTitleDatabase::getDefaultLocation() {
+	return std::string(db_path) + "/custom/rank_title.yml";
+}
+
+/**
+ * Reads and parses an entry from the rank_title
+ * @param node: YAML node containing the entry.
+ * @return count of successfully parsed rows
+ */
+uint64 RankTitleDatabase::parseBodyNode(const ryml::NodeRef& node) {
+
+	if (!this->nodesExist(node, { "Id", "RankName", "EXP" }))
+		return 0;
+
+		uint16 Id;
+
+	if (!this->asUInt16(node, "Id", Id))
+		return 0;
+
+	std::shared_ptr<s_rank_title> RankTitle = this->find(Id);
+	bool exists = RankTitle != nullptr;
+
+	if (!exists) {
+		if (!this->nodesExist(node, { "Id", "RankName", "EXP" }))
+			return 0;
+
+		RankTitle = std::make_shared<s_rank_title>();
+		RankTitle->title_id = Id;
+	}
+
+	if (this->nodeExists(node, "RankName")) {
+		std::string rank_name;
+
+		if (!this->asString(node, "RankName", rank_name))
+			return 0;
+
+		if (rank_name.length() > 50) {
+			this->invalidWarning(node["RankName"], "RankName \"%s\" exceeds maximum of %d characters, capping...\n", rank_name.c_str(), 50 - 1);
+		}
+
+        RankTitle->title_name = rank_name;
+	}
+
+	if (this->nodeExists(node, "EXP")) {
+		uint64 exp;
+
+		if (!this->asUInt64(node, "EXP", exp))
+			return 0;
+
+		RankTitle->exp = exp;
+	}
+
+    if (this->nodeExists(node, "Script")) {
+		std::string script;
+
+		if (!this->asString(node, "Script", script))
+			return 0;
+
+		if (exists && RankTitle->script) {
+			script_free_code(RankTitle->script);
+			RankTitle->script = nullptr;
+		}
+
+		RankTitle->script = parse_script(script.c_str(), this->getCurrentFile().c_str(), this->getLineNumber(node["Script"]), SCRIPT_IGNORE_EXTERNAL_BRACKETS);
+	} else {
+		if (!exists)
+			RankTitle->script = nullptr;
+	}
+
+	if( !exists ){
+		this->put( RankTitle->title_id , RankTitle );
+	}
+	return 1;
+}
+
+RankTitleDatabase rank_title_db;
+
+void RankTitleDatabase::loadingFinished() {
+
+	sort_rank_title_list = {};
+
+	for (const auto &entry : *this) {
+		sort_rank_title_list.push_back(entry.second->title_id);
+	}
+
+	std::sort(sort_rank_title_list.begin(), sort_rank_title_list.end());
+
+	TypesafeYamlDatabase::loadingFinished();
+}
+
 /**
  * Sets defaults in tables and starts read db functions
  * sv_readdb reads the file, outputting the information line-by-line to
@@ -15980,11 +16105,13 @@ void status_readdb( bool reload ){
 		refine_db.reload();
 		status_db.reload();
 		enchantgrade_db.reload();
+		rank_title_db.reload();
 	}else{
 		size_fix_db.load();
 		refine_db.load();
 		status_db.load();
 		enchantgrade_db.load();
+		rank_title_db.load();
 	}
 	elemental_attribute_db.load();
 }
@@ -16013,4 +16140,5 @@ void do_final_status(void) {
 	refine_db.clear();
 	status_db.clear();
 	elemental_attribute_db.clear();
+	rank_title_db.clear();
 }
diff --git a/src/map/status.hpp b/src/map/status.hpp
index 5a99abf..ea3db36 100644
--- a/src/map/status.hpp
+++ b/src/map/status.hpp
@@ -3490,4 +3490,33 @@ void do_init_status(void);
 void do_final_status(void);
 #endif /* ONLY_CONSTANTS */
 
+extern std::vector<int> sort_rank_title_list;
+
+struct s_rank_title {
+	uint16 title_id;
+	int64 exp;
+    std::string title_name;
+	struct script_code *script;	//Default script for everything.
+
+	~s_rank_title() {
+		if (this->script){
+			script_free_code(this->script);
+			this->script = nullptr;
+		}
+	}
+};
+
+class RankTitleDatabase : public TypesafeYamlDatabase<uint16, s_rank_title> {
+public:
+	RankTitleDatabase() : TypesafeYamlDatabase( "RANK_TITLE_DB", 1 ){
+
+	}
+
+	const std::string getDefaultLocation();
+	uint64 parseBodyNode(const ryml::NodeRef& node);
+	void loadingFinished() override;
+};
+
+extern RankTitleDatabase rank_title_db;
+
 #endif /* STATUS_HPP */
-- 
2.43.0.windows.1

